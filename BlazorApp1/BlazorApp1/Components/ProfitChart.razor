@page "/Chart"
@rendermode InteractiveServer
@using StockProSim.Data
@inject MyServerDb Database
@inject AuthenticationService authservice
@inject NavigationService Navservice

@* this code implements the profit chart page of my front end *@

<h1>Performance Chart</h1>

<p>Find a visual representation of how your portfolio has been peforming overtime where profit has been plotted against time.</p>

<h2>Portfolio Graph</h2>
<div class="container-fluid overflow-x-auto">
    <LineChart @ref="lineChart" Width="800" /> @* formats the space the line chart takes *@
</div>

<button @onclick="undo" disabled="@(Navservice.CanUndo() ? null : "true")"
        style="position: fixed; bottom: 1rem; right: 1rem; padding: 0.5rem 1rem; background-color: #3b82f6; color: white; border-radius: 0.375rem; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); transition: background-color 0.3s ease;"
        class="undo-button">
    ⬅ Go Back
</button>       @* initiallising and formatting the undo button *@

@code {
    private LineChart lineChart = default!;
    private LineChartOptions lineChartOptions = default!;
    private ChartData chartData = default!;
    private Random random = new();
    private int datasetsCount;
    private int labelsCount;

    protected override void OnInitialized()
    {
        Navservice.RecordNavigation("/Chart");
        lineChartOptions = new() // initialising the chart
            {
                IndexAxis = "x",
                Interaction = new Interaction { Mode = InteractionMode.Index, Intersect = false },
                Responsive = true,
            };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            chartData = new ChartData { Labels = new List<string>(), Datasets = new List<IChartDataset>() }; // calling all the profit chart data before initialising it into the chart
            await lineChart.InitializeAsync(chartData, lineChartOptions);
        }
        await base.OnAfterRenderAsync(firstRender);
        await PlotProfitsAsync();
        await PlotProfitsAsync(); // plotting the graph function twice to fully update all the data
    }

    private async Task PlotProfitsAsync() // function for plotting the points
    {
        int userID = await authservice.GetUserIdAsync();
        var profitData = Database.GetAllProfits(userID); // gets the profit chart points relevant to the logged in user

        var labels = new List<string>();
        var data = new List<double?>();

        foreach (var profit in profitData) // formatting the objects
        {
            labels.Add(profit.Date.ToString("yyyy-MM-dd"));
            data.Add((double?)profit.Value);
        }

        chartData = new ChartData
            {
                Labels = labels,
                Datasets = new List<IChartDataset>
            {
                new LineChartDataset // formatting the chart
                {
                    Label = "Profit",
                    Data = data,
                    BackgroundColor = "rgba(75, 192, 192, 0.2)",
                    BorderColor = "rgba(75, 192, 192, 1)",
                    PointRadius = new List<double> { 5 },
                    PointHoverRadius = new List<double> { 8 },
                }
            }
            };

        await lineChart.UpdateValuesAsync(chartData); // wait for the values to be updated then re render
    }
    private void undo() // calls the stack undo function
    {
        Navservice.Undo();
    }
}
