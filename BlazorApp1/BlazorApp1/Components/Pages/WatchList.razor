@page "/WatchList"
@using System.Net.Http.Json
@using Newtonsoft.Json;
@using StockProSim.Data
@using APIcalls
@inject APICalls ApiCalls
@inject HttpClient Http
@inject MyServerDb Database
@inject NavigationManager Navigation
@inject AuthenticationService authservice
@inject NavigationService Navservice
@attribute [StreamRendering]
@rendermode InteractiveServer

@* this code is for the stock watch list page of my front end *@

<PageTitle>Stock Watch List</PageTitle>

<h1>Stock Watch List</h1>

<p>Welcome to your watch list. Enter valid stock tickers to track them and recieve latest news updates on them on your homepage.</p>

<h2>A Table containing stocks you are tracking.</h2>

@if (stockdata == null)
{
    <p><em>Loading...</em></p> // whilst the data is still being fetched wait to render the table
}
else
{
    <table class="table">                   @* formatting for the watch list *@
        <thead>
            <tr>
                <th>Stock Ticker</th>
                <th>Current Price (USD)</th>
                <th>Open Price (USD)</th>
                <th>Price change</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var data in stockdata) // for each object in the list of stocks assign each them a field in the table before moving onto the next row
            {
                <tr>
                    <td>@data.Ticker</td>
                    <td>@data.CurrentPrice</td>
                    <td>@data.OpenPrice</td>
                    <td>@data.PriceChange</td>
                </tr>
            }
        </tbody>
    </table>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color: red;">@errorMessage</p>
}

<input type="text" @bind="newTicker" @oninput="UpdateTicker" placeholder="Enter stock ticker" />    @* binding all the buttons to call their relavent functions when clicked *@
<button class="btn btn-primary" @onclick="AddTickerAsync">Add</button>
<button class="btn btn-danger" @onclick="RemoveTickerAsync">Remove</button>

<button @onclick="undo" disabled="@(Navservice.CanUndo() ? null : "true")"
        style="position: fixed; bottom: 1rem; right: 1rem; padding: 0.5rem 1rem; background-color: #3b82f6; color: white; border-radius: 0.375rem; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); transition: background-color 0.3s ease;"
        class="undo-button">
    ⬅ Go Back
</button>   @* initiallising and formatting the undo button *@

@code {
    private string errorMessage = string.Empty;
    private StockData[]? stockdata;
    private string newTicker = string.Empty;

    protected override async Task OnInitializedAsync() // upon the page loading get the users watched stocks and generate a table
    {
        Navservice.RecordNavigation("/WatchList");
        int userID = await authservice.GetUserIdAsync();
        var watchlist = await Database.GetWatchlistAsync(userID);
        var stockDataList = new List<StockData>();

        foreach (var ticker in watchlist) // for each stock ticker get its stock information from an API call
        {
            var stockData = await ApiCalls.FetchStockInfoAsync(ticker);
            if (stockData.CurrentPrice != 0)
            {
                stockDataList.Add(stockData);
            }
            else
            {
                await Database.RemoveFromWatchlist(ticker, userID); // remove from watchlist if it doesnt have a price
            }
        }

        stockdata = stockDataList.ToArray();
    }

    private async Task AddTickerAsync() // add a stock ticker to the watchlist
    {
        int userID = await authservice.GetUserIdAsync();
        var watchlist = await Database.GetWatchlistAsync(userID);
        errorMessage = string.Empty;

        if (string.IsNullOrWhiteSpace(newTicker)) // check if a valid string was entered
        {
            errorMessage = "Stock ticker cannot be empty.";
            return;
        }
        if (watchlist.Contains(newTicker.ToUpper())) // check it isn't already on the list
        {
            errorMessage = "The stock is already on the watchlist.";
            return;
        }
        await Database.AddToWatchlist(newTicker.ToUpper(), userID); // call to add it to the databse
        newTicker = string.Empty;
        ReloadPage(); // clear the parameter and reload the page to refresh the table
    }


    private async Task RemoveTickerAsync() // remove a stcok ticker from the watchlist
    {
        int userID = await authservice.GetUserIdAsync();
        var watchlist = await Database.GetWatchlistAsync(userID);
        if (!string.IsNullOrWhiteSpace(newTicker)) // check that the string is not empty
        {
            if (watchlist.Contains(newTicker.ToUpper())) // check that the stock ticker exists in the list before removing it
            {
                await Database.RemoveFromWatchlist(newTicker.ToUpper(), userID);
                newTicker = string.Empty;
                ReloadPage();
            }
            else
            {
                errorMessage = "The stock is not on the watchlist."; // throw an error if it doesn't
                return;
            }

        }
        else
        {
            errorMessage = "Stock ticker cannot be empty."; // throw an error for an invalid input
            return;
        }
    }
    private void ReloadPage() // reloads the page to refresh the table
    {
        Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
    }
    private void UpdateTicker(ChangeEventArgs e) // forces the user to type in uppercase in the UI
    {
        newTicker = e.Value?.ToString()?.ToUpper();
    }
    private void undo() // calls teh stack undo function
    {
        Navservice.Undo();
    }
}


