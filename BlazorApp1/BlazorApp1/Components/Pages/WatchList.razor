@page "/WatchList"
@using System.Net.Http.Json
@using Newtonsoft.Json;
@using StockProSim.Data
@using APIcalls
@inject APICalls ApiCalls
@inject HttpClient Http
@inject MyServerDb Database
@inject NavigationManager Navigation
@inject AuthenticationService authservice
@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>Stock Watch List</PageTitle>

<h1>Stock Watch List</h1>

<p>Welcome to your watch list. Enter valid stock tickers to track them and recieve latest news updates on them on your homepage.</p>

<h2>A Table containing stocks you are tracking.</h2>

@if (stockdata == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Stock Ticker</th>
                <th>Current Price (USD)</th>
                <th>Open Price (USD)</th>
                <th>Price change</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var data in stockdata)
            {
                <tr>
                    <td>@data.Ticker</td>
                    <td>@data.CurrentPrice</td>
                    <td>@data.OpenPrice</td>
                    <td>@data.PriceChange</td>
                </tr>
            }
        </tbody>
    </table>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color: red;">@errorMessage</p>
}

<input type="text" @bind="newTicker" placeholder="Enter a stock ticker" style="text-transform: uppercase;" />
<button class="btn btn-primary" @onclick="AddTickerAsync">Add</button>
<button class="btn btn-danger" @onclick="RemoveTickerAsync">Remove</button>

@code {
    private string errorMessage = string.Empty;
    private StockData[]? stockdata;
    private string newTicker = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        int userID = await authservice.GetUserIdAsync();
        var watchlist = await Database.GetWatchlistAsync(userID);
        var stockDataList = new List<StockData>();

        foreach (var ticker in watchlist)
        {
            var stockData = await ApiCalls.FetchStockInfoAsync(ticker);
            if (stockData != null)
            {
                stockDataList.Add(stockData);
            }
        }

        stockdata = stockDataList.ToArray();
    }

    private async Task AddTickerAsync()
    {
        int userID = await authservice.GetUserIdAsync();
        var watchlist = await Database.GetWatchlistAsync(userID);
        errorMessage = string.Empty;

        if (string.IsNullOrWhiteSpace(newTicker))
        {
            errorMessage = "Stock ticker cannot be empty.";
            return;
        }
        if (watchlist.Contains(newTicker.ToUpper()))
        {
            errorMessage = "The stock is already on the watchlist.";
            return;
        }
        await Database.AddToWatchlist(newTicker.ToUpper(), userID);
        newTicker = string.Empty;
        ReloadPage();
    }


    private async Task RemoveTickerAsync()
    {
        int userID = await authservice.GetUserIdAsync();
        var watchlist = await Database.GetWatchlistAsync(userID);
        if (!string.IsNullOrWhiteSpace(newTicker))
        {
            if (watchlist.Contains(newTicker.ToUpper()))
            {
                await Database.RemoveFromWatchlist(newTicker.ToUpper(), userID);
                newTicker = string.Empty;
                ReloadPage();
            }
            else
            {
                errorMessage = "The stock is not on the watchlist.";
                return;
            }

        }
        else
        {
            errorMessage = "Stock ticker cannot be empty.";
            return;
        }
    }
    private void ReloadPage()
    {
        Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
    }
}


